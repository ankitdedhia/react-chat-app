{"version":3,"sources":["components/ConverstionListItem/index.js","components/ConversationList/index.js","components/Message/index.js","components/MessageList/index.js","components/Messenger/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["ConversationListItem","props","data","photo","coversation_id","name","text","className","src","alt","ConverstionList","useState","conversations","setConversations","useEffect","getConversations","a","axios","get","response","newConversations","map","result","conversation_id","participants","picture","thumbnail","first_name","last_name","type","placeholder","conversation","key","Message","MessageList","Avatar","IconButton","MoreVert","EmojiEmotionsOutlined","Send","Messenger","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0YAgBeA,G,MAbc,SAACC,GAAW,IAAD,EACQA,EAAMC,KAA5BC,GADc,EAC9BC,eAD8B,EACdD,OAAOE,EADO,EACPA,KAAMC,EADC,EACDA,KACnC,OACI,yBAAKC,UAAU,0BACf,yBAAKA,UAAU,qBAAqBC,IAAKL,EAAOM,IAAI,iBACpD,yBAAKF,UAAU,qBACb,wBAAIA,UAAU,sBAAsBF,GACpC,uBAAGE,UAAU,wBAAwBD,O,0CCuChCI,EA3CS,SAACT,GAAW,IAAD,EACWU,mBAAS,IADpB,mBACxBC,EADwB,KACTC,EADS,KAE/BC,qBAAU,WACNC,MACA,IAEN,IAAMA,EAAgB,uCAAG,8BAAAC,EAAA,sEAEFC,IAAMC,IAAI,wFAFR,OAEnBC,EAFmB,OAGXC,EAAmBD,EAASjB,KAAKA,KAAKmB,KAAI,SAAAC,GAC5C,MAAO,CACLC,gBAAiBD,EAAOC,gBACxBpB,MAAOmB,EAAOE,aAAaC,QAAQC,UACnCrB,KAAK,GAAD,OAAKiB,EAAOE,aAAaG,WAAzB,YAAuCL,EAAOE,aAAaI,WAC/DtB,KAAM,sEAGlBO,EAAiB,GAAD,mBAAKD,GAAL,YAAuBQ,KAXhB,2CAAH,qDAcpB,OACI,yBAAKb,UAAU,qBACX,yBAAKA,UAAU,kBAAf,YAKA,yBAAKA,UAAU,kBACX,kBAAC,IAAD,MACA,2BAAOsB,KAAK,OAAOxB,KAAK,SAASyB,YAAY,YAGjDlB,EAAcS,KAAI,SAACU,GACf,OAAO,kBAAC,EAAD,CAAuBC,IAAKD,EAAa1B,KAChDH,KAAM6B,S,2DCEPE,G,MAvCC,WACZ,OACI,oCACI,yBAAK1B,UAAU,gBAEX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,UAAf,uBAOR,yBAAKA,UAAU,qBAEX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,UAAf,2BAQR,yBAAKA,UAAU,qBAEX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,UAAf,8BCvBP2B,G,MAAc,WACvB,OACI,yBAAK3B,UAAU,mBACX,yBAAKA,UAAU,kBACX,kBAAC4B,EAAA,EAAD,MACA,yBAAK5B,UAAU,uBACX,wCACA,+CAEJ,yBAAKA,UAAU,wBACX,kBAAC6B,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACA,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,SAKZ,yBAAK9B,UAAU,gBACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,kBACX,kBAAC+B,EAAA,EAAD,MACA,2BAAOT,KAAK,OAAOC,YAAY,mBAC/B,kBAACS,EAAA,EAAD,UC3BHC,G,MAAY,WACrB,OACI,yBAAKjC,UAAU,aACX,yBAAKA,UAAU,sBACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,sBACX,kBAAC,EAAD,UCADkC,MARf,WACE,OACE,yBAAKlC,UAAU,OACb,kBAAC,EAAD,Q,MCKcmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7576d57d.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./ConverstionListItem.css\"\r\n\r\nconst ConversationListItem = (props) => {\r\n  const { coversation_id, photo, name, text } = props.data;\r\n    return (\r\n        <div className=\"conversation-list-item\" >\r\n        <img className=\"conversation-photo\" src={photo} alt=\"conversation\" />\r\n        <div className=\"conversation-info\">\r\n          <h1 className=\"conversation-title\">{name}</h1>\r\n          <p className=\"conversation-snippet\">{text}</p>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default ConversationListItem\r\n","import React, { useEffect, useState } from 'react';\r\nimport ConversationListItem from '../ConverstionListItem';\r\nimport \"./ConversationList.css\";\r\nimport SearchOutlinedIcon from '@material-ui/icons/SearchOutlined';\r\nimport axios from 'axios';\r\n\r\nconst ConverstionList = (props) => {\r\n    const [conversations, setConversations] = useState([]);\r\n    useEffect(() => {\r\n        getConversations()\r\n      },[])\r\n\r\n  const getConversations = async () => {\r\n    \r\n    let response = await axios.get('http://localhost:3001/conversation/getAllConvoByAuthorID?id=5f6854d300e1249de832578a');\r\n            let newConversations = response.data.data.map(result => {\r\n              return {\r\n                conversation_id: result.conversation_id,\r\n                photo: result.participants.picture.thumbnail,\r\n                name: `${result.participants.first_name} ${result.participants.last_name}`,\r\n                text: 'Hello world! This is a long message that needs to be truncated.'\r\n              };\r\n            });\r\n    setConversations([...conversations, ...newConversations]);\r\n      }\r\n    \r\n    return (\r\n        <div className=\"conversation-list\">\r\n            <div className=\"sidebar-header\">\r\n                Messages\r\n                 \r\n\r\n            </div>\r\n            <div className=\"sidebar-search\">\r\n                <SearchOutlinedIcon />\r\n                <input type=\"text\" name=\"search\" placeholder=\"Search\" />\r\n            </div>\r\n            {\r\n            conversations.map((conversation)=>{\r\n                return <ConversationListItem  key={conversation.name}\r\n                data={conversation} />\r\n                \r\n            })\r\n        }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConverstionList\r\n","import React from 'react'\r\nimport './message.css'\r\n\r\nconst Message = () => {\r\n    return (\r\n        <>\r\n            <div className=\"message-body\">\r\n                {/* <span className=\"username\">Victor Krum</span> */}\r\n                <div className=\"bubble-container\">\r\n                    <div className=\"bubble\" >\r\n                        This is a message\r\n                    </div>\r\n                </div>\r\n            {/* <div className=\"message_timestamp\">{new Date().toUTCString()}</div> */}\r\n\r\n            </div>\r\n            <div className=\"message-body mine\">\r\n                {/* <span className=\"username\">Jon Snow</span> */}\r\n                <div className=\"bubble-container\">\r\n                    <div className=\"bubble\" >\r\n                        Message from Jon Snow\r\n                    </div>\r\n                </div>\r\n\r\n                {/* <div className=\"message_timestamp\">{new Date().toUTCString()}</div> */}\r\n\r\n            </div>\r\n            <div className=\"message-body mine\">\r\n                {/* <span className=\"username\">Jon Snow</span> */}\r\n                <div className=\"bubble-container\">\r\n                    <div className=\"bubble\" >\r\n                        Message from Jon Snow\r\n                    </div>\r\n                </div>\r\n\r\n                {/* <div className=\"message_timestamp\">{new Date().toUTCString()}</div> */}\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import { Avatar, IconButton } from '@material-ui/core'\r\nimport { EmojiEmotionsOutlined, MoreVert, Send } from '@material-ui/icons';\r\nimport CallIcon from '@material-ui/icons/Call';\r\nimport React from 'react'\r\nimport Message from '../Message'\r\nimport './messagelist.css'\r\n\r\nexport const MessageList = () => {\r\n    return (\r\n        <div className=\"message-content\">\r\n            <div className=\"message-header\">\r\n                <Avatar />\r\n                <div className=\"message-header-info\">\r\n                    <h3>Jon Snow</h3>\r\n                    <p>Last Seen at...</p>\r\n                </div>\r\n                <div className=\"message-header-tools\">\r\n                    <IconButton>\r\n                        <CallIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <MoreVert />\r\n                    </IconButton>\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"message-list\">\r\n                <Message />\r\n            </div>\r\n            <div className=\"message-footer\">\r\n                <EmojiEmotionsOutlined />\r\n                <input type=\"text\" placeholder=\"Type a message\" />\r\n                <Send />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport ConverstionList from '../ConversationList'\r\nimport { MessageList } from '../MessageList'\r\nimport \"./messenger.css\"\r\n\r\nexport const Messenger = () => {\r\n    return (\r\n        <div className=\"messenger\">\r\n            <div className=\"scrollable sidebar\">\r\n                <ConverstionList />\r\n            </div>\r\n            <div className=\"scrollable content\">\r\n                <MessageList />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { Messenger } from '../Messenger';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Messenger />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n   <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}